import numpy as np
a = np.arange(15).reshape(3, 5)#创建一个3*5的数组
print(a)#打印数组
'''
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]]
'''
print(a.shape)#打印数组的形状
'''
(3, 5)
'''
print(a.ndim)#打印数组的维度
'''
2
'''
print(a.dtype.name)#打印数组的数据类型
'''
int32
'''
print(a.itemsize)#打印数组中每个元素的大小
'''
4
'''
print(a.size)#打印数组中元素的个数
'''
15
'''
print(type(a))#打印数组的类型
'''
<class 'numpy.ndarray'>
'''

b = np.array([6, 7, 8])#创建一个数组
print(b)#打印数组
'''
[6 7 8]
'''
print(type(b))#打印数组的类型
'''
<class 'numpy.ndarray'>
'''

a = np.array([2, 3, 4])
# b = np.array(1,2,3)#错误的创建方式
'''
TypeError: array() takes from 1 to 2 positional arguments but 3 were given
'''

b = np.array([(1, 2, 3),(4.1, 4.2, 4.3)])#创建一个二维数组
print(b)#打印数组
print(b.dtype.name)#打印数组的数据类型
'''
[[1.  2.  3. ]
 [4.1 4.2 4.3]]
float64
'''
c = np.array([(1,2),(3,4)],dtype=complex)#创建一个复数数组
print(c)#打印数组
'''
[[1.+0.j 2.+0.j]
 [3.+0.j 4.+0.j]]
'''

#初始占位符
#1 zeros
print(np.zeros((3, 4)))#创建一个3*4的全0数组
'''
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
'''
#2 ones
print(np.ones((2, 3, 4), dtype=np.int16))#创建一个2*3*4的全1数组
'''
[[[1 1 1 1]
  [1 1 1 1]
  [1 1 1 1]]

 [[1 1 1 1]
  [1 1 1 1]
  [1 1 1 1]]]
'''
#3 empty
print(np.empty((2, 3)))#创建一个2*3的空数组
#empty创建一个数组，其初始内容是随机的，取决于内存的状态。
'''
[[1.39069238e-309 1.39069238e-309 1.39069238e-309]
 [1.39069238e-309 1.39069238e-309 1.39069238e-309]]
'''
#4 arange
print(np.arange(10, 30, 5))#创建一个10到30，步长为5的数组
print(np.arange(0, 2, 0.3))#创建一个0到2，步长为0.3的数组
'''
[10 15 20 25]
[0.  0.3 0.6 0.9 1.2 1.5 1.8]
'''

#5 linspace
'''
当 arange 函数使用浮点数参数时，由于有限的浮点数精度，通常无法预测获得的元素数量。
因此，通常最好使用 linspace 函数，该函数接受我们想要的元素数量作为参数，而不是步长
'''
from numpy import pi
print(np.linspace(0, 2, 9))#创建一个0到2，元素个数为9的数组
'''
[0.   0.25 0.5  0.75 1.   1.25 1.5  1.75 2.  ]
'''
x = np.linspace(0, 2*pi, 10)#创建一个0到2*pi，元素个数为100的数组
f = np.sin(x)#对数组中的每个元素求正弦值
print(x)
'''
[0.         0.6981317  1.3962634  2.0943951  2.7925268  3.4906585
 4.1887902  4.88692191 5.58505361 6.28318531]
'''
print(f)
'''
[ 0.00000000e+00  6.42787610e-01  9.84807753e-01  8.66025404e-01
  3.42020143e-01 -3.42020143e-01 -8.66025404e-01 -9.84807753e-01
 -6.42787610e-01 -2.44929360e-16]
'''

#一维数组
print(np.arange(6))#创建一个0到5的数组
'''
[0 1 2 3 4 5]
'''
#二维数组
print(np.arange(12).reshape(4, 3))#创建一个4*3的数组
'''
[[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]]
'''
#三维数组
print(np.arange(24).reshape(2, 3, 4))#创建一个2*3*4的数组
'''
[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]

 [[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]]
'''
#省略打印
print(np.arange(10000))
'''
[   0    1    2 ... 9997 9998 9999]
'''
print(np.arange(10000).reshape(100, 100))
'''
[[   0    1    2 ...   97   98   99]
 [ 100  101  102 ...  197  198  199]
 [ 200  201  202 ...  297  298  299]
 ...
 [9700 9701 9702 ... 9797 9798 9799]
 [9800 9801 9802 ... 9897 9898 9899]
 [9900 9901 9902 ... 9997 9998 9999]]
'''
#强制打印
# np.set_printoptions(threshold=np.nan)#设置打印选项

#基本运算
# 1.创建数组
a = np.array([20,30,40,50])#创建一个数组
b = np.arange(4)#创建一个数组
print(b)#打印数组
'''
[0 1 2 3]
'''
# 2.数组减法
c = a-b#数组相减
print(c)#打印数组
'''
[20 29 38 47]
'''
#3.数组平方
print(b**2)#数组中每个元素的平方
'''
[0 1 4 9]
'''

## 基础操作
a = np.array([20, 30, 40, 50])#创建一个数组
b = np.arange(4)#创建一个数组

#1.减法
print(b)
print(a-b)
'''
[0 1 2 3]
[20 29 38 47]
'''
#2.平方
print(b**2)
'''
[0 1 4 9]
'''
#3.三角函数
print(10*np.sin(a))#对数组中的每个元素求正弦值
'''
[ 9.12945251 -9.88031624  7.4511316  -2.62374854]
'''
#4.判断数组中元素是否大于35
print(a<35)#返回一个布尔数组
'''
[ True  True False False]
''' 
print('*'*50)
#5.矩阵乘法
A = np.array([[1,1],
              [0,1]])#创建一个2*2的数组
B = np.array([[2,0],
              [3,4]])#创建一个2*2的数组
print(A*B)#数组对应元素相乘
'''
[[2 0]
 [0 4]]
'''
print(A@B)#矩阵乘法
'''
[[5 4]
 [3 4]]
'''
print(A.dot(B))#矩阵乘法
'''
[[5 4]
 [3 4]]
'''
print('*'*50)
#精确度
from numpy import pi
a = np.ones(3, dtype=np.int32)#创建一个全1的数组
b = np.linspace(0, pi, 3)#创建一个0到pi的数组
print(a)
print(b)
print(b.dtype.name)#打印数组的数据类型
'''
float64
'''
c = a+b#数组相加
print(c)#打印数组
'''
[1.         2.57079633 4.14159265]
'''
d = np.exp(c*1j)#对数组中的每个元素求指数值
print(d)#打印数组
'''
[ 0.54030231+0.84147098j -0.84147098+0.54030231j -0.54030231-0.84147098j]
'''
print(d.dtype.name)#打印数组的数据类型
'''
complex128
'''
print('*'*50)
#指定轴参数
b = np.arange(12).reshape(3, 4)#创建一个3*4的数组
print(b)#打印数组
'''
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
'''
print(b.sum(axis=0))#对每一列求和
'''
[12 15 18 21]
'''
print(b.min(axis=1))#对每一行求最小值
'''
[0 4 8]
'''
print(b.cumsum(axis=1))#对每一行元素进行累加
'''
[[ 0  1  3  6]
 [ 4  9 15 22]
 [ 8 17 27 38]]
'''
print('*'*50)
#索引、切片和迭代
a = np.arange(10)**3#创建一个0到9的数组，每个元素的立方
print(a)#打印数组
'''
[  0   1   8  27  64 125 216 343 512 729]
'''
print(a[2])#索引
'''
8
'''
print(a[2:5])#切片
'''
[ 8 27 64]
'''
# a[:6:2] = -1000#等价于a[0:6:2] = -1000
a[::1] += 1
print(a)#打印数组
'''
[  1   2   9  28  65 126 217 344 513 730]
'''
for i in a:#迭代
    print(i-1)
print('*'*50)
#多维数组
def f(x, y):
    return 10*x+y
b = np.fromfunction(f, (5, 4), dtype=int)#创建一个5*4的数组
'''
f 是一个接受两个参数的函数（因为数组是二维的），
这些参数分别代表数组的行索引和列索引。fromfunction 会生成两个坐标数组，
一个表示行索引，另一个表示列索引，然后将这些数组传递给函数 f。

参数 dtype=int 指定了生成的数组的数据类型为整数。
如果没有指定 dtype，默认的数据类型是浮点数
'''
print(b)#打印数组
'''
[[ 0  1  2  3]
 [10 11 12 13]
 [20 21 22 23]
 [30 31 32 33]
 [40 41 42 43]]
'''
print(b[2, 3])#索引
'''
23
'''
print(b[0:5, 1])#切片,获取第2列
'''
[ 1 11 21 31 41]
'''
print(b[:, 1])#获取第2列
'''
[ 1 11 21 31 41]
'''
print(b[1:3, :])#获取第2-3行
'''
[[10 11 12 13]
 [20 21 22 23]]
'''
print(b[1:3,1:3])#获取第2-3行，第2-3列
'''
[[11 12]
 [21 22]]
'''
print(b[-1])#获取最后一行
'''
[40 41 42 43]
'''

for row in b:
    print(row)#迭代
'''
[0 1 2 3]
[10 11 12 13]
[20 21 22 23]
[30 31 32 33]
[40 41 42 43]
'''

for element in b.flat:#迭代,逐个元素迭代
    print(element)
'''
0
1
2
3
10
11
12
13
20
21
22
23
30
31
32
33
40
41
42
43
'''
print('*'*50)
# 形状操作
rg = np.random.default_rng(1)#创建一个随机数生成器
a = np.floor(10*rg.random((3, 4)))#创建一个3*4的数组
print(a)#打印数组
'''
[[5. 9. 1. 9.]
 [3. 4. 8. 4.]
 [5. 0. 7. 5.]]
'''
print(a.shape)#打印数组的形状
'''
(3, 4)
'''
